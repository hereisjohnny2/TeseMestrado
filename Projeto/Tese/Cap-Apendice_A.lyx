#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass abnt
\begin_preamble
\usepackage {graphicx}
\usepackage {longtable}
\usepackage {indentfirst}
\renewenvironment{center}{\par\centering}{\par}

% Comentar linhas abaixo se não estiver usando pacote abntex
% ou se o pacote ainda não foi instalado.
% neste caso sugere-se usar citações no padrão apalike (lembra o da anbt).
\usepackage[alf ,abnt-etal-cite=2 , abnt-year-extra-label=yes , abnt-etal-list=0]{abntcite}
\usepackage {helvet}
\renewcommand {\familydefault}{\sfdefault}


\usepackage{color}
\definecolor{azulclaro}{rgb}{0.6,1,1}%   rgb color model
% Informa que vai usar o pacote listings, 
% disponibilizado em /usr/share/texmf/doc/latex/styles/listings.dvi
\usepackage{listings}
\end_preamble
\options normaltoc, sumarioincompleto
\use_default_options false
\maintain_unincluded_children false
\language brazilian
\language_package default
\inputencoding iso8859-1
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize 12
\spacing onehalf
\use_hyperref true
\pdf_title "Título da Monografia - Dissertação - Tese"
\pdf_author "Nome do Autor"
\pdf_subject "Descrever assunto"
\pdf_keywords "Copiar do resumo"
\pdf_bookmarks true
\pdf_bookmarksnumbered true
\pdf_bookmarksopen true
\pdf_bookmarksopenlevel 1
\pdf_breaklinks true
\pdf_pdfborder true
\pdf_colorlinks false
\pdf_backref page
\pdf_pdfusetitle true
\papersize a4paper
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 0
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\use_minted 0
\index Índice
\shortcut idx
\color #008000
\end_index
\paperwidth 210mm
\paperheight 297mm
\leftmargin 30mm
\topmargin 25mm
\rightmargin 20mm
\bottommargin 20mm
\secnumdepth 2
\tocdepth 1
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle fancy
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Chapter
Códigos Fonte 
\begin_inset Index idx
status open

\begin_layout Plain Layout
Código Fonte
\end_layout

\end_inset

 dos Softwares Desenvolvidos
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
lhead{Apêndice 
\backslash
thechapter: Titulo do apêndice}
\backslash
rhead{
\backslash
thepage}
\end_layout

\end_inset

Esse âpendice descreve os códigos fontes desenvolvidos para o a criação
 da ferramenta de anotação de regiões de interesse e dos 
\emph on
scripts
\emph default
 para treinamento e aplicação do modelo de 
\emph on
Machine Learning
\emph default
.
\end_layout

\begin_layout Section
Ferramenta de Aquisição de Regiões de Interesse
\end_layout

\begin_layout Subsection
RockImageUI
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "list: rockimageui.h"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language={C++},numbers=left,numberstyle={\footnotesize},basicstyle={\footnotesize\ttfamily},tabsize=4,caption={rockimageui.h}"
inline false
status collapsed

\begin_layout Plain Layout

#ifndef ROCK_IMAGE_CPP_ROCKIMAGEUI_H
\end_layout

\begin_layout Plain Layout

#define ROCK_IMAGE_CPP_ROCKIMAGEUI_H
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#include <QMainWindow>
\end_layout

\begin_layout Plain Layout

#include <QListWidgetItem>
\end_layout

\begin_layout Plain Layout

#include <QTreeWidgetItem>
\end_layout

\begin_layout Plain Layout

#include "../../widgets/PixelDataTable.h"
\end_layout

\begin_layout Plain Layout

#include "../../widgets/ImageDisplaySubWindow.h"
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

namespace RockImageUI {
\end_layout

\begin_layout Plain Layout

    QT_BEGIN_NAMESPACE
\end_layout

\begin_layout Plain Layout

    namespace Ui { class RockImageUI; }
\end_layout

\begin_layout Plain Layout

    QT_END_NAMESPACE
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    const static int ENTER_KEY_CODE = 16777220;
\end_layout

\begin_layout Plain Layout

    const static int DELETE_KEY_CODE = 16777223;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    class RockImageUI : public QMainWindow {
\end_layout

\begin_layout Plain Layout

    	Q_OBJECT
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    private:
\end_layout

\begin_layout Plain Layout

        QAction *showImagesAction, *showDataTablesAction;
\end_layout

\begin_layout Plain Layout

        Ui::RockImageUI *ui;
\end_layout

\begin_layout Plain Layout

    public:
\end_layout

\begin_layout Plain Layout

        explicit RockImageUI(QWidget *parent = nullptr);
\end_layout

\begin_layout Plain Layout

        ~RockImageUI() override;
\end_layout

\begin_layout Plain Layout

    private slots:
\end_layout

\begin_layout Plain Layout

        void openImage();
\end_layout

\begin_layout Plain Layout

        void saveTableData();
\end_layout

\begin_layout Plain Layout

        void cleanTable();
\end_layout

\begin_layout Plain Layout

        void collectDataFromImage();
\end_layout

\begin_layout Plain Layout

        void showImage(QListWidgetItem *listWidgetItem);
\end_layout

\begin_layout Plain Layout

        void closeAllWindows();
\end_layout

\begin_layout Plain Layout

        void zoomIn();
\end_layout

\begin_layout Plain Layout

        void zoomOut();
\end_layout

\begin_layout Plain Layout

        void addLayer();
\end_layout

\begin_layout Plain Layout

        void removeCurrentLayerLayer();
\end_layout

\begin_layout Plain Layout

        void showLayer(QTreeWidgetItem *treeWidgetItem, int column);
\end_layout

\begin_layout Plain Layout

        void increaseWidth();
\end_layout

\begin_layout Plain Layout

        void decreaseWidth();
\end_layout

\begin_layout Plain Layout

        void chooseColor();
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    private:
\end_layout

\begin_layout Plain Layout

        ImageDisplaySubWindow *getSubWidowByName(const QString& name);
\end_layout

\begin_layout Plain Layout

        ImageDisplaySubWindow *getCurrentSubWindow();
\end_layout

\begin_layout Plain Layout

        PixelDataTable* getCurrentDataTable();
\end_layout

\begin_layout Plain Layout

        PixelDataTable*  getPixelDataTableByName(const QString& name);
\end_layout

\begin_layout Plain Layout

        int  getPixelDataIndexTableByName(const QString& name);
\end_layout

\begin_layout Plain Layout

        ImageDisplayWidget *getCurrentSubWindowTopLayerImage();
\end_layout

\begin_layout Plain Layout

        void deleteCurrentImage();
\end_layout

\begin_layout Plain Layout

        void deleteImage(const QString& name);
\end_layout

\begin_layout Plain Layout

        void loadImage(const QString& filePath);
\end_layout

\begin_layout Plain Layout

        void createToolBar();
\end_layout

\begin_layout Plain Layout

        void setActionsIcons();
\end_layout

\begin_layout Plain Layout

        bool removeLayer(QTreeWidgetItem* item);
\end_layout

\begin_layout Plain Layout

        bool eventFilter(QObject *obj, QEvent *event) override;
\end_layout

\begin_layout Plain Layout

    };
\end_layout

\begin_layout Plain Layout

} // RockImageUI
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#endif //ROCK_IMAGE_CPP_ROCKIMAGEUI_H
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "list: rockimageui.cpp"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language={C++},numbers=left,numberstyle={\footnotesize},basicstyle={\footnotesize\ttfamily},breaklines=true,showstringspaces=false,tabsize=4,caption={rockimageui.cpp}"
inline false
status collapsed

\begin_layout Plain Layout

#include "rockimageui.h"
\end_layout

\begin_layout Plain Layout

#include "ui_rockimageui.h"
\end_layout

\begin_layout Plain Layout

#include <QtWidgets>
\end_layout

\begin_layout Plain Layout

#include <map>
\end_layout

\begin_layout Plain Layout

#include <QDialog>
\end_layout

\begin_layout Plain Layout

#include "../Dialogs/CustomMessageDialogs.h"
\end_layout

\begin_layout Plain Layout

#include "../Dialogs/ColorDialog.h"
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

namespace RockImageUI {
\end_layout

\begin_layout Plain Layout

    RockImageUI::RockImageUI(QWidget *parent) :
\end_layout

\begin_layout Plain Layout

            QMainWindow(parent), ui(new Ui::RockImageUI) {
\end_layout

\begin_layout Plain Layout

        ui->setupUi(this);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        setActionsIcons();
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        // File Menu Actions
\end_layout

\begin_layout Plain Layout

        connect(ui->openImageAction, SIGNAL(triggered()), this, SLOT(openImage()
));
\end_layout

\begin_layout Plain Layout

        connect(ui->saveDataAction, SIGNAL(triggered()), this, SLOT(saveTableDat
a()));
\end_layout

\begin_layout Plain Layout

        connect(ui->cleanTableAction, SIGNAL(triggered()), this, SLOT(cleanTable
()));
\end_layout

\begin_layout Plain Layout

        connect(ui->exitAction, &QAction::triggered, [this](){QApplication::quit
();});
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        // Images Menu Actions
\end_layout

\begin_layout Plain Layout

        connect(ui->addLayerAction, SIGNAL(triggered()), this, SLOT(addLayer()))
;
\end_layout

\begin_layout Plain Layout

        connect(ui->removeLayerAction, SIGNAL(triggered()), this, SLOT(removeCur
rentLayerLayer()));
\end_layout

\begin_layout Plain Layout

        connect(ui->increaseWidthAction, SIGNAL(triggered()), this, SLOT(increas
eWidth()));
\end_layout

\begin_layout Plain Layout

        connect(ui->decreaseWidthAction, SIGNAL(triggered()), this, SLOT(decreas
eWidth()));
\end_layout

\begin_layout Plain Layout

        connect(ui->chooseColorAction, SIGNAL(triggered()), this, SLOT(chooseCol
or()));
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        // ImageList Events
\end_layout

\begin_layout Plain Layout

        ui->imagesList->installEventFilter(this);
\end_layout

\begin_layout Plain Layout

        connect(ui->imagesList,
\end_layout

\begin_layout Plain Layout

                SIGNAL(itemDoubleClicked(QListWidgetItem*)),
\end_layout

\begin_layout Plain Layout

                this,
\end_layout

\begin_layout Plain Layout

                SLOT(showImage(QListWidgetItem*)));
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        // ImageTree Events
\end_layout

\begin_layout Plain Layout

        ui->imageTree->installEventFilter(this);
\end_layout

\begin_layout Plain Layout

        ui->imageTree->installEventFilter(this);
\end_layout

\begin_layout Plain Layout

        connect(ui->imageTree,
\end_layout

\begin_layout Plain Layout

                SIGNAL(itemDoubleClicked(QTreeWidgetItem*,int)),
\end_layout

\begin_layout Plain Layout

                this,
\end_layout

\begin_layout Plain Layout

                SLOT(showLayer(QTreeWidgetItem*,int)));
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        // Show Dock Widgets Menu
\end_layout

\begin_layout Plain Layout

        ui->tableTabDockWidget->setVisible(false);
\end_layout

\begin_layout Plain Layout

        ui->imagesListDockWidget->setVisible(false);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        showImagesAction = ui->imagesListDockWidget->toggleViewAction();
\end_layout

\begin_layout Plain Layout

        showImagesAction->setText("Lista de Imagens");
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        showDataTablesAction = ui->tableTabDockWidget->toggleViewAction();
\end_layout

\begin_layout Plain Layout

        showDataTablesAction->setText("Tabelas de Dados");
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        ui->showDockMenu->addAction(showImagesAction);
\end_layout

\begin_layout Plain Layout

        ui->showDockMenu->addAction(showDataTablesAction);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        // ToolBar Actions
\end_layout

\begin_layout Plain Layout

        connect(ui->collectDataAction, SIGNAL(triggered()), this, SLOT(collectDa
taFromImage()));
\end_layout

\begin_layout Plain Layout

        connect(ui->closeAllAction, SIGNAL(triggered()), this, SLOT(closeAllWind
ows()));
\end_layout

\begin_layout Plain Layout

        connect(ui->zoomInAction, SIGNAL(triggered()), this, SLOT(zoomIn()));
\end_layout

\begin_layout Plain Layout

        connect(ui->zoomOutAction, SIGNAL(triggered()), this, SLOT(zoomOut()));
\end_layout

\begin_layout Plain Layout

        connect(ui->changeLabelAction, SIGNAL(triggered()), this, SLOT(changeTar
getLabel()));
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        createToolBar();
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    RockImageUI::~RockImageUI() {
\end_layout

\begin_layout Plain Layout

        delete ui;
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    void RockImageUI::openImage() {
\end_layout

\begin_layout Plain Layout

        QString fileName = QFileDialog::getOpenFileName(this, tr("Abrir
 Imagem"), QDir::homePath(), tr("Image Files (*.png *.jpg *.bmp)"));
\end_layout

\begin_layout Plain Layout

        QFile file(fileName);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        if (!file.exists()) {
\end_layout

\begin_layout Plain Layout

            QMessageBox::warning(this, "Error", "Não foi possível abrir
 a imagem selecionada.");
\end_layout

\begin_layout Plain Layout

            return;
\end_layout

\begin_layout Plain Layout

        }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        loadImage(fileName);
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    void RockImageUI::saveTableData() {
\end_layout

\begin_layout Plain Layout

        auto pixelDataTable = getCurrentDataTable();
\end_layout

\begin_layout Plain Layout

        if (pixelDataTable == nullptr) {
\end_layout

\begin_layout Plain Layout

            QMessageBox::warning(this,
\end_layout

\begin_layout Plain Layout

                                 "Tabela Vazia",
\end_layout

\begin_layout Plain Layout

                                 "Não exitem dados a serem coletados.");
\end_layout

\begin_layout Plain Layout

            return;
\end_layout

\begin_layout Plain Layout

        }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        QString filter("Text files (*.txt, *.dat)");
\end_layout

\begin_layout Plain Layout

        QString fileName = QFileDialog::getSaveFileName(
\end_layout

\begin_layout Plain Layout

                this, tr("Salvar Dados"), QDir::homePath(), filter, &filter);
\end_layout

\begin_layout Plain Layout

        QFile file(fileName);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        if (!file.open(QIODevice::WriteOnly | QFile::Text)) {
\end_layout

\begin_layout Plain Layout

            QMessageBox::warning(this, "Erro", "Não foi possível salvar
 o arquivo.");
\end_layout

\begin_layout Plain Layout

            return;
\end_layout

\begin_layout Plain Layout

        }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        QTextStream out(&file);
\end_layout

\begin_layout Plain Layout

        for (int i = 0; i < pixelDataTable->rowCount(); ++i) {
\end_layout

\begin_layout Plain Layout

            out << pixelDataTable->item(i, 2)->text() << "
\backslash
t"
\end_layout

\begin_layout Plain Layout

                << pixelDataTable->item(i, 3)->text() << "
\backslash
t"
\end_layout

\begin_layout Plain Layout

                << pixelDataTable->item(i, 4)->text() << "
\backslash
t"
\end_layout

\begin_layout Plain Layout

                << pixelDataTable->item(i, 5)->text() << "
\backslash
n";
\end_layout

\begin_layout Plain Layout

        }
\end_layout

\begin_layout Plain Layout

        file.close();
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        QMessageBox::information(this, "Sucesso", "Arquivo Salvo com Sucesso");
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    void RockImageUI::cleanTable() {
\end_layout

\begin_layout Plain Layout

        auto pixelDataTable = getCurrentDataTable();
\end_layout

\begin_layout Plain Layout

        if (pixelDataTable == nullptr) {
\end_layout

\begin_layout Plain Layout

            QMessageBox::warning(this,
\end_layout

\begin_layout Plain Layout

                                 "Tabela Vazia",
\end_layout

\begin_layout Plain Layout

                                 "Não exitem dados a serem coletados.");
\end_layout

\begin_layout Plain Layout

            return;
\end_layout

\begin_layout Plain Layout

        }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        bool result = CustomMessageDialogs::Question(
\end_layout

\begin_layout Plain Layout

                this,
\end_layout

\begin_layout Plain Layout

                "Limpar Tabela",
\end_layout

\begin_layout Plain Layout

                "Tem certeza que deseja limpar os dados coletados na tabela?");
\end_layout

\begin_layout Plain Layout

        if (!result) {
\end_layout

\begin_layout Plain Layout

            return;
\end_layout

\begin_layout Plain Layout

        }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        pixelDataTable->clearContents();
\end_layout

\begin_layout Plain Layout

        pixelDataTable->setRowCount(0);
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    void RockImageUI::loadImage(const QString& filePath) {
\end_layout

\begin_layout Plain Layout

        QListWidgetItem *listItem;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        QString fileName = filePath.section("/", -1, -1);
\end_layout

\begin_layout Plain Layout

        QList<QListWidgetItem*> foundItems = ui->imagesList->findItems(fileName,
 Qt::MatchExactly);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        if (foundItems.empty()) {
\end_layout

\begin_layout Plain Layout

            listItem = new QListWidgetItem();
\end_layout

\begin_layout Plain Layout

            listItem->setText(fileName);
\end_layout

\begin_layout Plain Layout

            listItem->setToolTip(filePath);
\end_layout

\begin_layout Plain Layout

            ui->imagesList->addItem(listItem);
\end_layout

\begin_layout Plain Layout

        } else {
\end_layout

\begin_layout Plain Layout

            listItem = foundItems[0];
\end_layout

\begin_layout Plain Layout

        }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        auto foundTreeItems = ui->imageTree->findItems(fileName, Qt::MatchExactl
y);
\end_layout

\begin_layout Plain Layout

        if (foundTreeItems.isEmpty()) {
\end_layout

\begin_layout Plain Layout

            auto treeItem = new QTreeWidgetItem();
\end_layout

\begin_layout Plain Layout

            treeItem->setText(0, fileName);
\end_layout

\begin_layout Plain Layout

            ui->imageTree->addTopLevelItem(treeItem);
\end_layout

\begin_layout Plain Layout

        }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        ui->imagesListDockWidget->setVisible(true);
\end_layout

\begin_layout Plain Layout

        ui->tableTabDockWidget->setVisible(true);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        showImage(listItem);
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    void RockImageUI::showImage(QListWidgetItem *listWidgetItem) {
\end_layout

\begin_layout Plain Layout

        QString filePath = listWidgetItem->toolTip();
\end_layout

\begin_layout Plain Layout

        QString fileName = listWidgetItem->text();
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        auto pixelDataTableIndex = getPixelDataIndexTableByName(fileName);
\end_layout

\begin_layout Plain Layout

        if (pixelDataTableIndex == -1) {
\end_layout

\begin_layout Plain Layout

            auto *pixelDataTable = new PixelDataTable();
\end_layout

\begin_layout Plain Layout

            ui->dataTablesTab->addTab(pixelDataTable, fileName);
\end_layout

\begin_layout Plain Layout

            pixelDataTableIndex = ui->dataTablesTab->count();
\end_layout

\begin_layout Plain Layout

        }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        ui->dataTablesTab->setCurrentIndex(pixelDataTableIndex);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        auto *subWindow = getSubWidowByName(fileName);
\end_layout

\begin_layout Plain Layout

        if (subWindow == nullptr) {
\end_layout

\begin_layout Plain Layout

            subWindow = new ImageDisplaySubWindow(filePath, fileName);
\end_layout

\begin_layout Plain Layout

            subWindow->setAttribute(Qt::WA_DeleteOnClose);
\end_layout

\begin_layout Plain Layout

            ui->openImagesArea->addSubWindow(subWindow);
\end_layout

\begin_layout Plain Layout

        }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        subWindow->loadImage(filePath);
\end_layout

\begin_layout Plain Layout

        subWindow->show();
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    void RockImageUI::collectDataFromImage() {
\end_layout

\begin_layout Plain Layout

        auto window = getCurrentSubWindow();
\end_layout

\begin_layout Plain Layout

        if (window == nullptr) {
\end_layout

\begin_layout Plain Layout

            return;
\end_layout

\begin_layout Plain Layout

        }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        auto *imageDisplayWidget = window->getTopLayerImage();
\end_layout

\begin_layout Plain Layout

        if (imageDisplayWidget == nullptr) {
\end_layout

\begin_layout Plain Layout

            return;
\end_layout

\begin_layout Plain Layout

        }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        auto pixelDataTable = getPixelDataTableByName(window->windowTitle());
\end_layout

\begin_layout Plain Layout

        if (pixelDataTable == nullptr) {
\end_layout

\begin_layout Plain Layout

            QMessageBox::warning(this,
\end_layout

\begin_layout Plain Layout

                                 "Tabela Vazia",
\end_layout

\begin_layout Plain Layout

                                 "Não exite tabela com dados a serem coletados.")
;
\end_layout

\begin_layout Plain Layout

            return;
\end_layout

\begin_layout Plain Layout

        }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        ui->dataTablesTab->setCurrentWidget(pixelDataTable);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        QHash<QPoint, QRgb> pixelDataMap = imageDisplayWidget->getPixelDataMap()
;
\end_layout

\begin_layout Plain Layout

        for(auto i = pixelDataMap.constBegin(); i != pixelDataMap.constEnd();
 ++i) {
\end_layout

\begin_layout Plain Layout

            pixelDataTable->addData(i.key(), i.value(), imageDisplayWidget->getLab
el());
\end_layout

\begin_layout Plain Layout

        }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        imageDisplayWidget->clearPixelDataMap();
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    PixelDataTable* RockImageUI::getPixelDataTableByName(const QString&
 name) {
\end_layout

\begin_layout Plain Layout

        for (int i = 0; i < ui->dataTablesTab->count(); ++i) {
\end_layout

\begin_layout Plain Layout

            if (ui->dataTablesTab->tabText(i) == name) {
\end_layout

\begin_layout Plain Layout

                return dynamic_cast<PixelDataTable *>(ui->dataTablesTab->widget(
i));
\end_layout

\begin_layout Plain Layout

            }
\end_layout

\begin_layout Plain Layout

        }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        return nullptr;
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    ImageDisplaySubWindow *RockImageUI::getSubWidowByName(const QString&
 name) {
\end_layout

\begin_layout Plain Layout

        for (auto &subWindow : ui->openImagesArea->subWindowList()) {
\end_layout

\begin_layout Plain Layout

            if (subWindow->windowTitle() == name) {
\end_layout

\begin_layout Plain Layout

                return dynamic_cast<ImageDisplaySubWindow *>(subWindow);
\end_layout

\begin_layout Plain Layout

            }
\end_layout

\begin_layout Plain Layout

        }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        return nullptr;
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    void RockImageUI::closeAllWindows() {
\end_layout

\begin_layout Plain Layout

        ui->openImagesArea->closeAllSubWindows();
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    void RockImageUI::zoomIn() {
\end_layout

\begin_layout Plain Layout

        auto *activeSubWindow = (ImageDisplaySubWindow*) ui->openImagesArea->cur
rentSubWindow();
\end_layout

\begin_layout Plain Layout

        if (activeSubWindow == nullptr) {
\end_layout

\begin_layout Plain Layout

            QMessageBox::warning(this,
\end_layout

\begin_layout Plain Layout

                                 "Área de Trabalho Vazia",
\end_layout

\begin_layout Plain Layout

                                 "Não existe nenhuma janela ativa no momento.");
\end_layout

\begin_layout Plain Layout

            return;
\end_layout

\begin_layout Plain Layout

        }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        activeSubWindow->scaleImage(1.25);
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    void RockImageUI::zoomOut() {
\end_layout

\begin_layout Plain Layout

        auto currentSubWindow = getCurrentSubWindow();
\end_layout

\begin_layout Plain Layout

        if (currentSubWindow == nullptr) {
\end_layout

\begin_layout Plain Layout

            QMessageBox::warning(this,
\end_layout

\begin_layout Plain Layout

                                 "Área de Trabalho Vazia",
\end_layout

\begin_layout Plain Layout

                                 "Não existe nenhuma janela ativa no momento.");
\end_layout

\begin_layout Plain Layout

            return;
\end_layout

\begin_layout Plain Layout

        }
\end_layout

\begin_layout Plain Layout

        currentSubWindow->scaleImage(0.75);
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    ImageDisplaySubWindow *RockImageUI::getCurrentSubWindow() {
\end_layout

\begin_layout Plain Layout

        auto *activeSubWindow = dynamic_cast<ImageDisplaySubWindow*>(ui->openIma
gesArea->currentSubWindow());
\end_layout

\begin_layout Plain Layout

        return activeSubWindow;
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    PixelDataTable *RockImageUI::getCurrentDataTable() {
\end_layout

\begin_layout Plain Layout

        auto *pixelDataTable = dynamic_cast<PixelDataTable*>(ui->dataTablesTab->
currentWidget());
\end_layout

\begin_layout Plain Layout

        return pixelDataTable;
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    ImageDisplayWidget *RockImageUI::getCurrentSubWindowTopLayerImage()
 {
\end_layout

\begin_layout Plain Layout

        auto currentSubWindow = getCurrentSubWindow();
\end_layout

\begin_layout Plain Layout

        if (currentSubWindow == nullptr) {
\end_layout

\begin_layout Plain Layout

            QMessageBox::warning(this,
\end_layout

\begin_layout Plain Layout

                                 "Área de Trabalho Vazia",
\end_layout

\begin_layout Plain Layout

                                 "Não existe nenhuma janela ativa no momento
 com dados a serem coletados.");
\end_layout

\begin_layout Plain Layout

            return nullptr;
\end_layout

\begin_layout Plain Layout

        }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        auto *imageDisplayWidget = dynamic_cast<ImageDisplayWidget*>(currentSubW
indow->getTopLayerImage());
\end_layout

\begin_layout Plain Layout

        return imageDisplayWidget;
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    void RockImageUI::createToolBar() {
\end_layout

\begin_layout Plain Layout

        ui->toolBar->clear();
\end_layout

\begin_layout Plain Layout

        ui->toolBar->addAction(ui->openImageAction);
\end_layout

\begin_layout Plain Layout

        ui->toolBar->addSeparator();
\end_layout

\begin_layout Plain Layout

        ui->toolBar->addAction(ui->collectDataAction);
\end_layout

\begin_layout Plain Layout

        ui->toolBar->addAction(ui->changeLabelAction);
\end_layout

\begin_layout Plain Layout

        ui->toolBar->addAction(ui->cleanTableAction);
\end_layout

\begin_layout Plain Layout

        ui->toolBar->addSeparator();
\end_layout

\begin_layout Plain Layout

        ui->toolBar->addAction(ui->zoomInAction);
\end_layout

\begin_layout Plain Layout

        ui->toolBar->addAction(ui->zoomOutAction);
\end_layout

\begin_layout Plain Layout

        ui->toolBar->addSeparator();
\end_layout

\begin_layout Plain Layout

        ui->toolBar->addAction(ui->closeAllAction);
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    void RockImageUI::setActionsIcons() {
\end_layout

\begin_layout Plain Layout

        ui->openImageAction->setIcon(QIcon("../assets/icons/add.svg"));
\end_layout

\begin_layout Plain Layout

        ui->saveDataAction->setIcon(QIcon("../assets/icons/save.svg"));
\end_layout

\begin_layout Plain Layout

        ui->cleanTableAction->setIcon(QIcon("../assets/icons/clean-table.svg"));
\end_layout

\begin_layout Plain Layout

        ui->exitAction->setIcon(QIcon("../assets/icons/exit.svg"));
\end_layout

\begin_layout Plain Layout

        ui->applyBinarizationAction->setIcon(QIcon("../assets/icons/binary.svg"));
\end_layout

\begin_layout Plain Layout

        ui->collectDataAction->setIcon(QIcon("../assets/icons/collect.svg"));
\end_layout

\begin_layout Plain Layout

        ui->changeLabelAction->setIcon(QIcon("../assets/icons/change.svg"));
\end_layout

\begin_layout Plain Layout

        ui->zoomInAction->setIcon(QIcon("../assets/icons/zoom-in.svg"));
\end_layout

\begin_layout Plain Layout

        ui->zoomOutAction->setIcon(QIcon("../assets/icons/zoom-out.svg"));
\end_layout

\begin_layout Plain Layout

        ui->closeAllAction->setIcon(QIcon("../assets/icons/close-all.svg"));
\end_layout

\begin_layout Plain Layout

        ui->addLayerAction->setIcon(QIcon("../assets/icons/layer.svg"));
\end_layout

\begin_layout Plain Layout

        ui->removeLayerAction->setIcon(QIcon("../assets/icons/remove.svg"));
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    bool RockImageUI::eventFilter(QObject *obj, QEvent *event) {
\end_layout

\begin_layout Plain Layout

        if (event->type() == QEvent::KeyPress) {
\end_layout

\begin_layout Plain Layout

            auto *keyEvent = dynamic_cast<QKeyEvent *>(event);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

            if(keyEvent->key() == ENTER_KEY_CODE) {
\end_layout

\begin_layout Plain Layout

                if (dynamic_cast<QListWidget*>(obj) != nullptr) {
\end_layout

\begin_layout Plain Layout

                    showImage(ui->imagesList->currentItem());
\end_layout

\begin_layout Plain Layout

                    return true;
\end_layout

\begin_layout Plain Layout

                }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

                if (dynamic_cast<QTreeWidget*>(obj) != nullptr) {
\end_layout

\begin_layout Plain Layout

                    showLayer(ui->imageTree->currentItem(), 0);
\end_layout

\begin_layout Plain Layout

                    return true;
\end_layout

\begin_layout Plain Layout

                }
\end_layout

\begin_layout Plain Layout

            }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

            if(keyEvent->key() == DELETE_KEY_CODE) {
\end_layout

\begin_layout Plain Layout

                if (dynamic_cast<QListWidget*>(obj) != nullptr) {
\end_layout

\begin_layout Plain Layout

                    deleteCurrentImage();
\end_layout

\begin_layout Plain Layout

                    return true;
\end_layout

\begin_layout Plain Layout

                }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

                if (dynamic_cast<QTreeWidget*>(obj) != nullptr) {
\end_layout

\begin_layout Plain Layout

                    auto item = ui->imageTree->currentItem();
\end_layout

\begin_layout Plain Layout

                    if (item->parent() == nullptr) return false;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

                    return removeLayer(item);
\end_layout

\begin_layout Plain Layout

                }
\end_layout

\begin_layout Plain Layout

            }
\end_layout

\begin_layout Plain Layout

            return false;
\end_layout

\begin_layout Plain Layout

        } else {
\end_layout

\begin_layout Plain Layout

            return QObject::eventFilter(obj, event);
\end_layout

\begin_layout Plain Layout

        }
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    void RockImageUI::deleteImage(const QString& name) {
\end_layout

\begin_layout Plain Layout

        auto subWindow = getSubWidowByName(name);
\end_layout

\begin_layout Plain Layout

        if (subWindow != nullptr) {
\end_layout

\begin_layout Plain Layout

            subWindow->close();
\end_layout

\begin_layout Plain Layout

        }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        auto dataTableIndex = getPixelDataIndexTableByName(name);
\end_layout

\begin_layout Plain Layout

        if (dataTableIndex > -1) {
\end_layout

\begin_layout Plain Layout

            ui->dataTablesTab->removeTab(dataTableIndex);
\end_layout

\begin_layout Plain Layout

        }
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    void RockImageUI::deleteCurrentImage() {
\end_layout

\begin_layout Plain Layout

        bool  result = CustomMessageDialogs::Question(
\end_layout

\begin_layout Plain Layout

                this,
\end_layout

\begin_layout Plain Layout

                "Remover Imagem",
\end_layout

\begin_layout Plain Layout

                "Tem certeza que deseja remover essa imagem da área da trabalho?
");
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        if (!result) {
\end_layout

\begin_layout Plain Layout

            return;
\end_layout

\begin_layout Plain Layout

        }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        int index = ui->imagesList->currentRow();
\end_layout

\begin_layout Plain Layout

        QString name = ui->imagesList->currentItem()->text();
\end_layout

\begin_layout Plain Layout

        deleteImage(name);
\end_layout

\begin_layout Plain Layout

        ui->imagesList->takeItem(index);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        ui->imageTree->takeTopLevelItem(index);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        if (ui->imagesList->currentRow() == -1) {
\end_layout

\begin_layout Plain Layout

            ui->tableTabDockWidget->setVisible(false);
\end_layout

\begin_layout Plain Layout

            ui->imagesListDockWidget->setVisible(false);
\end_layout

\begin_layout Plain Layout

        }
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    void RockImageUI::addLayer() {
\end_layout

\begin_layout Plain Layout

        auto window = getCurrentSubWindow();
\end_layout

\begin_layout Plain Layout

        if (window == nullptr) return;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        bool isOk;
\end_layout

\begin_layout Plain Layout

        QString label = QInputDialog::getText(this,
\end_layout

\begin_layout Plain Layout

                                              tr("Adicionar Camada"),
\end_layout

\begin_layout Plain Layout

                                              tr("Label:"), QLineEdit::Normal,
 "layer", &isOk);
\end_layout

\begin_layout Plain Layout

        if (!isOk or label.isEmpty()) {
\end_layout

\begin_layout Plain Layout

            QMessageBox::warning(this, tr("Adicionar Camada"), tr("Toda
 camada deve possuir uma label."));
\end_layout

\begin_layout Plain Layout

            return;
\end_layout

\begin_layout Plain Layout

        }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        window->addNewLayer(label);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        auto layerTreeItem = new QTreeWidgetItem();
\end_layout

\begin_layout Plain Layout

        layerTreeItem->setText(0, label);
\end_layout

\begin_layout Plain Layout

        layerTreeItem->setBackground(1, window->getTopLayerImage()->getPenBrush(
));
\end_layout

\begin_layout Plain Layout

        auto node = ui->imageTree->findItems(window->windowTitle(), Qt::MatchExa
ctly)[0];
\end_layout

\begin_layout Plain Layout

        node->addChild(layerTreeItem);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        ui->imageTree->setCurrentItem(layerTreeItem);
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    void RockImageUI::removeCurrentLayerLayer() {
\end_layout

\begin_layout Plain Layout

        auto window = getCurrentSubWindow();
\end_layout

\begin_layout Plain Layout

        if (window == nullptr) return;
\end_layout

\begin_layout Plain Layout

        window->removeCurrentLayer();
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    int RockImageUI::getPixelDataIndexTableByName(const QString &name) {
\end_layout

\begin_layout Plain Layout

        auto table = getPixelDataTableByName(name);
\end_layout

\begin_layout Plain Layout

        if (table == nullptr) return -1;
\end_layout

\begin_layout Plain Layout

        return ui->dataTablesTab->indexOf(table);
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    void RockImageUI::showLayer(QTreeWidgetItem *treeWidgetItem, int column)
 {
\end_layout

\begin_layout Plain Layout

        QString subWindowName, name;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        if (treeWidgetItem->parent() == nullptr) {
\end_layout

\begin_layout Plain Layout

            subWindowName = treeWidgetItem->text(0);
\end_layout

\begin_layout Plain Layout

            name = StackedImagesWidget::BASE_IMAGE;
\end_layout

\begin_layout Plain Layout

        } else {
\end_layout

\begin_layout Plain Layout

            subWindowName = treeWidgetItem->parent()->text(0);
\end_layout

\begin_layout Plain Layout

            name = treeWidgetItem->text(column);
\end_layout

\begin_layout Plain Layout

        }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        auto subWindow = getSubWidowByName(subWindowName);
\end_layout

\begin_layout Plain Layout

        subWindow->showLayer(name);
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    bool RockImageUI::removeLayer(QTreeWidgetItem* item) {
\end_layout

\begin_layout Plain Layout

        bool  result = CustomMessageDialogs::Question(
\end_layout

\begin_layout Plain Layout

                this,
\end_layout

\begin_layout Plain Layout

                "Remover Camada",
\end_layout

\begin_layout Plain Layout

                "Tem certeza que deseja remover essa camada?");
\end_layout

\begin_layout Plain Layout

        if (!result) return false;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        auto window = getCurrentSubWindow();
\end_layout

\begin_layout Plain Layout

        if (window == nullptr) return false;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        auto parent = item->parent();
\end_layout

\begin_layout Plain Layout

        window->removeLayerByName(item->text(0));
\end_layout

\begin_layout Plain Layout

        parent->removeChild(item);
\end_layout

\begin_layout Plain Layout

        return true;
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    void RockImageUI::increaseWidth() {
\end_layout

\begin_layout Plain Layout

        auto window = getCurrentSubWindow();
\end_layout

\begin_layout Plain Layout

        if (window == nullptr) return;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        window->updatePenWidth(1);
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    void RockImageUI::decreaseWidth() {
\end_layout

\begin_layout Plain Layout

        auto window = getCurrentSubWindow();
\end_layout

\begin_layout Plain Layout

        if (window == nullptr) return;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        window->updatePenWidth(-1);
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    void RockImageUI::chooseColor() {
\end_layout

\begin_layout Plain Layout

        auto window = getCurrentSubWindow();
\end_layout

\begin_layout Plain Layout

        if (window == nullptr) return;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        bool isOk;
\end_layout

\begin_layout Plain Layout

        QList<int> colors = ColorDialog::getStrings(this, &isOk);
\end_layout

\begin_layout Plain Layout

        if (!isOk or colors.isEmpty()) {
\end_layout

\begin_layout Plain Layout

            QMessageBox::warning(this, tr("Mudar Color"), tr("Selecionar
 ao menos um valor"));
\end_layout

\begin_layout Plain Layout

            return;
\end_layout

\begin_layout Plain Layout

        }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        QColor color(colors[0], colors[1], colors[2]);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        auto node = ui->imageTree->currentItem();
\end_layout

\begin_layout Plain Layout

        if (node == nullptr) return;
\end_layout

\begin_layout Plain Layout

        node->setBackground(1, color);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        window->updatePenBrush(color);
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

} // RockImageUI
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
CustomMessageDialogs
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "list: customdialog.h"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language={C++},numbers=left,numberstyle={\footnotesize},basicstyle={\footnotesize\ttfamily},breaklines=true,tabsize=4,caption={CustomMessageDialogs.h}"
inline false
status collapsed

\begin_layout Plain Layout

#ifndef ROCK_IMAGE_CPP_CUSTOMMESSAGEDIALOGS_H
\end_layout

\begin_layout Plain Layout

#define ROCK_IMAGE_CPP_CUSTOMMESSAGEDIALOGS_H
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#include <QString>
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

class CustomMessageDialogs {
\end_layout

\begin_layout Plain Layout

public:
\end_layout

\begin_layout Plain Layout

    static bool Question(QWidget *parent, const QString& title, const QString&
 text);
\end_layout

\begin_layout Plain Layout

};
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#endif //ROCK_IMAGE_CPP_CUSTOMMESSAGEDIALOGS_H
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "list: customdialog.cpp"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language={C++},numbers=left,numberstyle={\footnotesize},basicstyle={\footnotesize\ttfamily},breaklines=true,showstringspaces=false,tabsize=4,caption={CustomMessageDialogs.cpp}"
inline false
status collapsed

\begin_layout Plain Layout

#include <QMessageBox>
\end_layout

\begin_layout Plain Layout

#include "CustomMessageDialogs.h"
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

bool CustomMessageDialogs::Question(QWidget *parent, const QString &title,
 const QString &text) {
\end_layout

\begin_layout Plain Layout

    QMessageBox::StandardButton result = QMessageBox::question(parent, title,
 text);
\end_layout

\begin_layout Plain Layout

    if (result == QMessageBox::Yes) {
\end_layout

\begin_layout Plain Layout

        return true;
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

    return false;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
ColorDialog
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "list: colordialog.h"

\end_inset


\begin_inset listings
lstparams "language={C++},numbers=left,numberstyle={\footnotesize},basicstyle={\footnotesize\ttfamily},breaklines=true,showstringspaces=false,tabsize=4,caption={ColorDialog.h}"
inline false
status collapsed

\begin_layout Plain Layout

#ifndef ROCK_IMAGE_CPP_COLORDIALOG_H
\end_layout

\begin_layout Plain Layout

#define ROCK_IMAGE_CPP_COLORDIALOG_H
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#include <QDialog>
\end_layout

\begin_layout Plain Layout

#include <QSpinBox>
\end_layout

\begin_layout Plain Layout

#include <QFormLayout>
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

class ColorDialog : public QDialog {
\end_layout

\begin_layout Plain Layout

    Q_OBJECT
\end_layout

\begin_layout Plain Layout

public:
\end_layout

\begin_layout Plain Layout

    explicit ColorDialog(QWidget *parent = nullptr);
\end_layout

\begin_layout Plain Layout

    static QList<int> getStrings(QWidget *parent, bool *ok = nullptr);
\end_layout

\begin_layout Plain Layout

private:
\end_layout

\begin_layout Plain Layout

    QFormLayout *lytMain;
\end_layout

\begin_layout Plain Layout

    QList<QSpinBox*> fields;
\end_layout

\begin_layout Plain Layout

    void createColorInput(const QString &label);
\end_layout

\begin_layout Plain Layout

};
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#endif //ROCK_IMAGE_CPP_COLORDIALOG_H
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "list: colordialog.cpp"

\end_inset


\begin_inset listings
lstparams "language={C++},numbers=left,numberstyle={\footnotesize},basicstyle={\footnotesize\ttfamily},breaklines=true,showstringspaces=false,tabsize=4,caption={ColorDialog.cpp}"
inline false
status collapsed

\begin_layout Plain Layout

#include <QLabel>
\end_layout

\begin_layout Plain Layout

#include <QDialogButtonBox>
\end_layout

\begin_layout Plain Layout

#include "ColorDialog.h"
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

ColorDialog::ColorDialog(QWidget *parent) {
\end_layout

\begin_layout Plain Layout

    lytMain = new QFormLayout(this);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    createColorInput("Vermelho");
\end_layout

\begin_layout Plain Layout

    createColorInput("Verde");
\end_layout

\begin_layout Plain Layout

    createColorInput("Azul");
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    auto *buttonBox = new QDialogButtonBox
\end_layout

\begin_layout Plain Layout

            ( QDialogButtonBox::Ok | QDialogButtonBox::Cancel,
\end_layout

\begin_layout Plain Layout

              Qt::Horizontal, this );
\end_layout

\begin_layout Plain Layout

    lytMain->addWidget(buttonBox);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    bool conn = connect(buttonBox, &QDialogButtonBox::accepted,
\end_layout

\begin_layout Plain Layout

                        this, &ColorDialog::accept);
\end_layout

\begin_layout Plain Layout

    Q_ASSERT(conn);
\end_layout

\begin_layout Plain Layout

    conn = connect(buttonBox, &QDialogButtonBox::rejected,
\end_layout

\begin_layout Plain Layout

                   this, &ColorDialog::reject);
\end_layout

\begin_layout Plain Layout

    Q_ASSERT(conn);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    setLayout(lytMain);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

QList<int> ColorDialog::getStrings(QWidget *parent, bool *ok)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

    auto *dialog = new ColorDialog(parent);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    QList<int> list;
\end_layout

\begin_layout Plain Layout

    const int ret = dialog->exec();
\end_layout

\begin_layout Plain Layout

    if (ok)
\end_layout

\begin_layout Plain Layout

        *ok = !!ret;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    if (ret) {
\end_layout

\begin_layout Plain Layout

        foreach (auto field, dialog->fields) {
\end_layout

\begin_layout Plain Layout

            list << field->value();
\end_layout

\begin_layout Plain Layout

        }
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    dialog->deleteLater();
\end_layout

\begin_layout Plain Layout

    return list;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void ColorDialog::createColorInput(const QString &label) {
\end_layout

\begin_layout Plain Layout

    auto *tLabel = new QLabel(label, this);
\end_layout

\begin_layout Plain Layout

    auto *value = new QSpinBox(this);
\end_layout

\begin_layout Plain Layout

    value->setMinimum(0);
\end_layout

\begin_layout Plain Layout

    value->setMaximum(255);
\end_layout

\begin_layout Plain Layout

    value->setValue(125);
\end_layout

\begin_layout Plain Layout

    lytMain->addRow(tLabel, value);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    fields << value;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "list: StackedImagesWidget.h"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "list: stackedimageswidget.h"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language={C++},numbers=left,numberstyle={\footnotesize},basicstyle={\footnotesize\ttfamily},tabsize=4,caption={StackedImagesWidget.h}"
inline false
status collapsed

\begin_layout Plain Layout

#ifndef ROCK_IMAGE_CPP_STACKEDIMAGESWIDGET_H
\end_layout

\begin_layout Plain Layout

#define ROCK_IMAGE_CPP_STACKEDIMAGESWIDGET_H
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#include <QLabel>
\end_layout

\begin_layout Plain Layout

#include <QStackedLayout>
\end_layout

\begin_layout Plain Layout

#include <QStack>
\end_layout

\begin_layout Plain Layout

#include "ImageDisplayWidget.h"
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

class StackedImagesWidget : public QVBoxLayout  {
\end_layout

\begin_layout Plain Layout

private:
\end_layout

\begin_layout Plain Layout

    QStackedLayout *stackedLayout;
\end_layout

\begin_layout Plain Layout

    QStack<ImageDisplayWidget *> layers;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

public:
\end_layout

\begin_layout Plain Layout

    StackedImagesWidget();
\end_layout

\begin_layout Plain Layout

    [[nodiscard]] QStack<ImageDisplayWidget *> getImages() const;
\end_layout

\begin_layout Plain Layout

    [[nodiscard]] ImageDisplayWidget * getImageByName(const QString &name)
 const;
\end_layout

\begin_layout Plain Layout

    void addLayer(ImageDisplayWidget *layer);
\end_layout

\begin_layout Plain Layout

    void removeLayer();
\end_layout

\begin_layout Plain Layout

    void scaleImage(double factor) const;
\end_layout

\begin_layout Plain Layout

    void setTopLayer(const QString &name);
\end_layout

\begin_layout Plain Layout

    void removeLayerByName(const QString &name);
\end_layout

\begin_layout Plain Layout

    static const QString BASE_IMAGE;
\end_layout

\begin_layout Plain Layout

};
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#endif //ROCK_IMAGE_CPP_STACKEDIMAGESWIDGET_H
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "list: stackedimageswidget.cpp"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language={C++},numbers=left,numberstyle={\footnotesize},basicstyle={\footnotesize\ttfamily},breaklines=true,showstringspaces=false,tabsize=4,caption={StackedImagesWidget.cpp}"
inline false
status collapsed

\begin_layout Plain Layout

#include "StackedImagesWidget.h"
\end_layout

\begin_layout Plain Layout

#include <algorithm>
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

const QString StackedImagesWidget::BASE_IMAGE = "baseImage";
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

StackedImagesWidget::StackedImagesWidget() {
\end_layout

\begin_layout Plain Layout

    stackedLayout = new QStackedLayout;
\end_layout

\begin_layout Plain Layout

    addLayout(stackedLayout);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

QStack<ImageDisplayWidget *> StackedImagesWidget::getImages() const {
\end_layout

\begin_layout Plain Layout

    return layers;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

ImageDisplayWidget *StackedImagesWidget::getImageByName(const QString &name)
 const {
\end_layout

\begin_layout Plain Layout

    auto layer = std::find_if(layers.begin(), layers.end(), [&](ImageDisplayWidget
* item) {
\end_layout

\begin_layout Plain Layout

        return name == item->getLabel();
\end_layout

\begin_layout Plain Layout

    });
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    return *layer;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void StackedImagesWidget::addLayer(ImageDisplayWidget *layer) {
\end_layout

\begin_layout Plain Layout

    stackedLayout->addWidget(layer);
\end_layout

\begin_layout Plain Layout

    stackedLayout->setCurrentIndex(stackedLayout->count() - 1);
\end_layout

\begin_layout Plain Layout

    layers.push_back(layer);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void StackedImagesWidget::scaleImage(double factor) const {
\end_layout

\begin_layout Plain Layout

    auto image = getImageByName(StackedImagesWidget::BASE_IMAGE);
\end_layout

\begin_layout Plain Layout

    image->resize(factor * image->pixmap(Qt::ReturnByValue).size());
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void StackedImagesWidget::removeLayer() {
\end_layout

\begin_layout Plain Layout

    if (stackedLayout->count() > 1) {
\end_layout

\begin_layout Plain Layout

        layers.pop_back();
\end_layout

\begin_layout Plain Layout

        stackedLayout->takeAt(stackedLayout->count() - 1);
\end_layout

\begin_layout Plain Layout

        stackedLayout->setCurrentIndex(stackedLayout->count() - 1);
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void StackedImagesWidget::setTopLayer(const QString &name) {
\end_layout

\begin_layout Plain Layout

    auto image = getImageByName(name);
\end_layout

\begin_layout Plain Layout

    stackedLayout->setCurrentWidget(image);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void StackedImagesWidget::removeLayerByName(const QString &name) {
\end_layout

\begin_layout Plain Layout

    auto layer = getImageByName(name);
\end_layout

\begin_layout Plain Layout

    stackedLayout->removeWidget(layer);
\end_layout

\begin_layout Plain Layout

    layers.removeIf([=](ImageDisplayWidget* layer) {
\end_layout

\begin_layout Plain Layout

        return layer->getLabel() == name;
\end_layout

\begin_layout Plain Layout

    });
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
PixelDataTable
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "list: pixeldatatable.h"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language={C++},numbers=left,numberstyle={\footnotesize},basicstyle={\footnotesize\ttfamily},breaklines=true,showstringspaces=false,tabsize=4,caption={PixelDataTable.h}"
inline false
status collapsed

\begin_layout Plain Layout

#ifndef ROCK_IMAGE_CPP_PIXELDATATABLE_H
\end_layout

\begin_layout Plain Layout

#define ROCK_IMAGE_CPP_PIXELDATATABLE_H
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#include <QTableWidget>
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

class PixelDataTable : public QTableWidget {
\end_layout

\begin_layout Plain Layout

public:
\end_layout

\begin_layout Plain Layout

    PixelDataTable();
\end_layout

\begin_layout Plain Layout

    void addData(const QPoint& point, const QRgb& rgb, const QString& label);
\end_layout

\begin_layout Plain Layout

private:
\end_layout

\begin_layout Plain Layout

    void setTableHeaders();
\end_layout

\begin_layout Plain Layout

    void addCell(int column, const QString& value);
\end_layout

\begin_layout Plain Layout

};
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#endif //ROCK_IMAGE_CPP_PIXELDATATABLE_H
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "list: pixeldatatable.cpp"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language={C++},numbers=left,numberstyle={\footnotesize},basicstyle={\footnotesize\ttfamily},breaklines=true,showstringspaces=false,tabsize=4,caption={PixelDataTable.cpp}"
inline false
status collapsed

\begin_layout Plain Layout

#include "PixelDataTable.h"
\end_layout

\begin_layout Plain Layout

#include <QHeaderView>
\end_layout

\begin_layout Plain Layout

#include <QTableWidgetItem>
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

PixelDataTable::PixelDataTable() {
\end_layout

\begin_layout Plain Layout

    setTableHeaders();
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    QSizePolicy updatedSizePolicy;
\end_layout

\begin_layout Plain Layout

    updatedSizePolicy.setHorizontalStretch(0);
\end_layout

\begin_layout Plain Layout

    updatedSizePolicy.setVerticalStretch(0);
\end_layout

\begin_layout Plain Layout

    updatedSizePolicy.setHeightForWidth(sizePolicy().hasHeightForWidth());
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    setSizePolicy(updatedSizePolicy);
\end_layout

\begin_layout Plain Layout

    horizontalHeader()->setStretchLastSection(true);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void PixelDataTable::setTableHeaders() {
\end_layout

\begin_layout Plain Layout

    setColumnCount(6);
\end_layout

\begin_layout Plain Layout

    setHorizontalHeaderItem(0, new QTableWidgetItem("PosX"));
\end_layout

\begin_layout Plain Layout

    setHorizontalHeaderItem(1, new QTableWidgetItem("PosY"));
\end_layout

\begin_layout Plain Layout

    setHorizontalHeaderItem(2, new QTableWidgetItem("Vermelho"));
\end_layout

\begin_layout Plain Layout

    setHorizontalHeaderItem(3, new QTableWidgetItem("Verde"));
\end_layout

\begin_layout Plain Layout

    setHorizontalHeaderItem(4, new QTableWidgetItem("Azul"));
\end_layout

\begin_layout Plain Layout

    setHorizontalHeaderItem(5, new QTableWidgetItem("Label"));
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void PixelDataTable::addData(const QPoint &point, const QRgb& rgb, const
 QString& label) {
\end_layout

\begin_layout Plain Layout

    setRowCount(rowCount() + 1);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    addCell(0, QString::number(point.x()));
\end_layout

\begin_layout Plain Layout

    addCell(1, QString::number(point.y()));
\end_layout

\begin_layout Plain Layout

    addCell(2, QString::number(qRed(rgb)));
\end_layout

\begin_layout Plain Layout

    addCell(3, QString::number(qGreen(rgb)));
\end_layout

\begin_layout Plain Layout

    addCell(4, QString::number(qBlue(rgb)));
\end_layout

\begin_layout Plain Layout

    addCell(5, label);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void PixelDataTable::addCell(int column, const QString& value) {
\end_layout

\begin_layout Plain Layout

    setItem(rowCount() - 1, column, new QTableWidgetItem(value));
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
ImageDisplayWidget
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "list: imagedisplaywidget.h"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language={C++},numbers=left,numberstyle={\footnotesize},basicstyle={\footnotesize\ttfamily},breaklines=true,showstringspaces=false,tabsize=4,caption={ImageDisplayWidget.h}"
inline false
status collapsed

\begin_layout Plain Layout

#ifndef ROCK_IMAGE_CPP_IMAGEDISPLAYWIDGET_H
\end_layout

\begin_layout Plain Layout

#define ROCK_IMAGE_CPP_IMAGEDISPLAYWIDGET_H
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#include <QLabel>
\end_layout

\begin_layout Plain Layout

#include <map>
\end_layout

\begin_layout Plain Layout

#include "PixelDataTable.h"
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

class ImageDisplayWidget : public QLabel {
\end_layout

\begin_layout Plain Layout

private:
\end_layout

\begin_layout Plain Layout

    QImage image;
\end_layout

\begin_layout Plain Layout

    QImage compositeImage;
\end_layout

\begin_layout Plain Layout

    QHash<QPoint, QRgb> pixelDataMap{};
\end_layout

\begin_layout Plain Layout

    QPoint lastPoint;
\end_layout

\begin_layout Plain Layout

    QString label = "layer";
\end_layout

\begin_layout Plain Layout

    int penWidth {10};
\end_layout

\begin_layout Plain Layout

    QBrush penBrush {Qt::blue};
\end_layout

\begin_layout Plain Layout

    void drawLineTo(const QPoint &endPoint);
\end_layout

\begin_layout Plain Layout

    QImage createImageWithOverlay();
\end_layout

\begin_layout Plain Layout

public:
\end_layout

\begin_layout Plain Layout

    ImageDisplayWidget();
\end_layout

\begin_layout Plain Layout

    void setImage(const QImage &newImage);
\end_layout

\begin_layout Plain Layout

    [[nodiscard]] const QImage &getImage() const;
\end_layout

\begin_layout Plain Layout

    [[nodiscard]] const QHash<QPoint, QRgb> &getPixelDataMap() const;
\end_layout

\begin_layout Plain Layout

    [[nodiscard]] const QString &getLabel() const;
\end_layout

\begin_layout Plain Layout

    [[nodiscard]] int getPenWidth() const;
\end_layout

\begin_layout Plain Layout

    void setPenWidth(int penWidth);
\end_layout

\begin_layout Plain Layout

    [[nodiscard]] QBrush getPenBrush() const;
\end_layout

\begin_layout Plain Layout

    void setPenBrush(const QBrush &penBrush);
\end_layout

\begin_layout Plain Layout

    void setLabel(const QString &name);
\end_layout

\begin_layout Plain Layout

    void clearPixelDataMap();
\end_layout

\begin_layout Plain Layout

protected:
\end_layout

\begin_layout Plain Layout

    void mousePressEvent(QMouseEvent *event) override;
\end_layout

\begin_layout Plain Layout

    void mouseMoveEvent(QMouseEvent *event) override;
\end_layout

\begin_layout Plain Layout

    void mouseReleaseEvent(QMouseEvent *event) override;
\end_layout

\begin_layout Plain Layout

    void paintEvent(QPaintEvent *event) override;
\end_layout

\begin_layout Plain Layout

};
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#endif //ROCK_IMAGE_CPP_IMAGEDISPLAYWIDGET_H
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "list: imagedisplaywidget.cpp"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language={C++},numbers=left,numberstyle={\footnotesize},basicstyle={\footnotesize\ttfamily},breaklines=true,showstringspaces=false,tabsize=4,caption={ImageDisplayWidget.cpp}"
inline false
status collapsed

\begin_layout Plain Layout

#include <QMouseEvent>
\end_layout

\begin_layout Plain Layout

#include <QPainter>
\end_layout

\begin_layout Plain Layout

#include "ImageDisplayWidget.h"
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

ImageDisplayWidget::ImageDisplayWidget() {
\end_layout

\begin_layout Plain Layout

    setBackgroundRole(QPalette::Base);
\end_layout

\begin_layout Plain Layout

    setSizePolicy(QSizePolicy::Policy::Ignored, QSizePolicy::Policy::Ignored);
\end_layout

\begin_layout Plain Layout

    setScaledContents(true);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void ImageDisplayWidget::mousePressEvent(QMouseEvent *event) {
\end_layout

\begin_layout Plain Layout

    if (event->button() == Qt::LeftButton) {
\end_layout

\begin_layout Plain Layout

        lastPoint = event->pos();
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void ImageDisplayWidget::mouseMoveEvent(QMouseEvent *event) {
\end_layout

\begin_layout Plain Layout

    if (label == "baseImage") {
\end_layout

\begin_layout Plain Layout

        return;
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    QPoint currentPoint = event->pos();
\end_layout

\begin_layout Plain Layout

    QRgb rgb = QColor(image.pixel(currentPoint)).rgb();
\end_layout

\begin_layout Plain Layout

    pixelDataMap.insert(currentPoint, rgb);
\end_layout

\begin_layout Plain Layout

    drawLineTo(event->pos());
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void ImageDisplayWidget::mouseReleaseEvent(QMouseEvent *event) {
\end_layout

\begin_layout Plain Layout

    if (event->button() == Qt::LeftButton and label != "baseImage") {
\end_layout

\begin_layout Plain Layout

        drawLineTo(event->pos());
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void ImageDisplayWidget::setImage(const QImage &newImage) {
\end_layout

\begin_layout Plain Layout

    image = newImage;
\end_layout

\begin_layout Plain Layout

    compositeImage = createImageWithOverlay();
\end_layout

\begin_layout Plain Layout

    QPixmap p = QPixmap::fromImage(compositeImage);
\end_layout

\begin_layout Plain Layout

    setPixmap(p);
\end_layout

\begin_layout Plain Layout

    adjustSize();
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

const QImage &ImageDisplayWidget::getImage() const {
\end_layout

\begin_layout Plain Layout

    return image;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

const QHash<QPoint, QRgb> &ImageDisplayWidget::getPixelDataMap() const {
\end_layout

\begin_layout Plain Layout

    return pixelDataMap;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void ImageDisplayWidget::clearPixelDataMap() {
\end_layout

\begin_layout Plain Layout

    pixelDataMap = {};
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void ImageDisplayWidget::drawLineTo(const QPoint &endPoint) {
\end_layout

\begin_layout Plain Layout

    QPainter painter(&compositeImage);
\end_layout

\begin_layout Plain Layout

    painter.setPen(QPen(penBrush, penWidth, Qt::SolidLine, Qt::RoundCap,
 Qt::RoundJoin));
\end_layout

\begin_layout Plain Layout

    painter.drawLine(lastPoint, endPoint);
\end_layout

\begin_layout Plain Layout

    int rad = (10 / 2) + 2;
\end_layout

\begin_layout Plain Layout

    update(QRect(lastPoint, endPoint).normalized()
\end_layout

\begin_layout Plain Layout

                   .adjusted(-rad, -rad, +rad, +rad));
\end_layout

\begin_layout Plain Layout

    lastPoint = endPoint;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void ImageDisplayWidget::paintEvent(QPaintEvent *event) {
\end_layout

\begin_layout Plain Layout

    QPainter painter(this);
\end_layout

\begin_layout Plain Layout

    painter.setRenderHint(QPainter::Antialiasing, false);
\end_layout

\begin_layout Plain Layout

    painter.drawImage(QPoint(0,0), compositeImage);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

const QString &ImageDisplayWidget::getLabel() const {
\end_layout

\begin_layout Plain Layout

    return label;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void ImageDisplayWidget::setLabel(const QString &name) {
\end_layout

\begin_layout Plain Layout

    ImageDisplayWidget::label = name;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

QImage ImageDisplayWidget::createImageWithOverlay() {
\end_layout

\begin_layout Plain Layout

    QImage imageWithOverlay = QImage(image.size(), QImage::Format_RGB16);
\end_layout

\begin_layout Plain Layout

    QPainter painter(&imageWithOverlay);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    painter.setCompositionMode(QPainter::CompositionMode_Source);
\end_layout

\begin_layout Plain Layout

    painter.fillRect(imageWithOverlay.rect(), Qt::transparent);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    painter.setCompositionMode(QPainter::CompositionMode_SourceOver);
\end_layout

\begin_layout Plain Layout

    painter.drawImage(0, 0, image);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    painter.setCompositionMode(QPainter::CompositionMode_SourceOver);
\end_layout

\begin_layout Plain Layout

    painter.drawImage(0, 0, image.createAlphaMask());
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    painter.end();
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    return imageWithOverlay;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

int ImageDisplayWidget::getPenWidth() const {
\end_layout

\begin_layout Plain Layout

    return penWidth;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void ImageDisplayWidget::setPenWidth(int penWidth) {
\end_layout

\begin_layout Plain Layout

    ImageDisplayWidget::penWidth = penWidth;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

QBrush ImageDisplayWidget::getPenBrush() const {
\end_layout

\begin_layout Plain Layout

    return penBrush;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void ImageDisplayWidget::setPenBrush(const QBrush &penBrush) {
\end_layout

\begin_layout Plain Layout

    ImageDisplayWidget::penBrush = penBrush;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
ImageDisplaySubWindow
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "list: imagedisplaysubwindow.h"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language={C++},numbers=left,numberstyle={\footnotesize},basicstyle={\footnotesize\ttfamily},breaklines=true,showstringspaces=false,tabsize=4,caption={ImageDisplaySubWindow.h}"
inline false
status collapsed

\begin_layout Plain Layout

#ifndef ROCK_IMAGE_CPP_IMAGEDISPLAYSUBWINDOW_H
\end_layout

\begin_layout Plain Layout

#define ROCK_IMAGE_CPP_IMAGEDISPLAYSUBWINDOW_H
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#include <QMdiSubWindow>
\end_layout

\begin_layout Plain Layout

#include <QLabel>
\end_layout

\begin_layout Plain Layout

#include <QScrollArea>
\end_layout

\begin_layout Plain Layout

#include "ImageDisplayWidget.h"
\end_layout

\begin_layout Plain Layout

#include "StackedImagesWidget.h"
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

class ImageDisplaySubWindow : public QMdiSubWindow {
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

private:
\end_layout

\begin_layout Plain Layout

    StackedImagesWidget *stackedImagesWidget;
\end_layout

\begin_layout Plain Layout

    QScrollArea *scrollArea;
\end_layout

\begin_layout Plain Layout

    double scaleFactor = 1;
\end_layout

\begin_layout Plain Layout

    static void adjustScrollBar(QScrollBar *bar, double factor);
\end_layout

\begin_layout Plain Layout

    static QColor generateRandomColor();
\end_layout

\begin_layout Plain Layout

public:
\end_layout

\begin_layout Plain Layout

    ImageDisplaySubWindow(const QString& filePath, const QString& fileName);
\end_layout

\begin_layout Plain Layout

    [[nodiscard]] ImageDisplayWidget *getTopLayerImage() const;
\end_layout

\begin_layout Plain Layout

    bool loadImage(const QString &filePath);
\end_layout

\begin_layout Plain Layout

    void scaleImage(double factor);
\end_layout

\begin_layout Plain Layout

    void addNewLayer(const QString& label);
\end_layout

\begin_layout Plain Layout

    void showLayer(const QString &name);
\end_layout

\begin_layout Plain Layout

    void removeCurrentLayer();
\end_layout

\begin_layout Plain Layout

    void removeLayerByName(const QString& name);
\end_layout

\begin_layout Plain Layout

    void updatePenWidth(const int& value);
\end_layout

\begin_layout Plain Layout

    void updatePenBrush(const QColor & value);
\end_layout

\begin_layout Plain Layout

};
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#endif //ROCK_IMAGE_CPP_IMAGEDISPLAYSUBWINDOW_H
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "list: imagedisplaysubwindow.cpp"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language={C++},numbers=left,numberstyle={\footnotesize},basicstyle={\footnotesize\ttfamily},breaklines=true,showstringspaces=false,tabsize=4,caption={ImageDisplaySubWindow.cpp}"
inline false
status collapsed

\begin_layout Plain Layout

#include <QImageReader>
\end_layout

\begin_layout Plain Layout

#include <QMessageBox>
\end_layout

\begin_layout Plain Layout

#include <QGuiApplication>
\end_layout

\begin_layout Plain Layout

#include <QDir>
\end_layout

\begin_layout Plain Layout

#include <QScreen>
\end_layout

\begin_layout Plain Layout

#include <QMouseEvent>
\end_layout

\begin_layout Plain Layout

#include <QScrollBar>
\end_layout

\begin_layout Plain Layout

#include <QPainter>
\end_layout

\begin_layout Plain Layout

#include <random>
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#include "ImageDisplaySubWindow.h"
\end_layout

\begin_layout Plain Layout

#include "ImageDisplayWidget.h"
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

ImageDisplaySubWindow::ImageDisplaySubWindow(const QString& filePath, const
 QString& fileName)
\end_layout

\begin_layout Plain Layout

    : stackedImagesWidget(new StackedImagesWidget()), scrollArea(new QScrollArea
())
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

    this->setWindowTitle(fileName);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    scrollArea->setBackgroundRole(QPalette::Dark);
\end_layout

\begin_layout Plain Layout

    scrollArea->setLayout(stackedImagesWidget);
\end_layout

\begin_layout Plain Layout

    scrollArea->setVisible(false);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    this->setWidget(scrollArea);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    resize(QGuiApplication::primaryScreen()->availableSize() * 2 / 5);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

bool ImageDisplaySubWindow::loadImage(const QString &filePath) {
\end_layout

\begin_layout Plain Layout

    QImageReader imageReader(filePath);
\end_layout

\begin_layout Plain Layout

    imageReader.setAutoTransform(true);
\end_layout

\begin_layout Plain Layout

    const QImage newImage = imageReader.read();
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    if (newImage.isNull()) {
\end_layout

\begin_layout Plain Layout

        QMessageBox::information(
\end_layout

\begin_layout Plain Layout

                this,
\end_layout

\begin_layout Plain Layout

                QGuiApplication::applicationDisplayName(),
\end_layout

\begin_layout Plain Layout

                tr("Cannot load %1: %2")
\end_layout

\begin_layout Plain Layout

                    .arg(QDir::toNativeSeparators(filePath), imageReader.errorStri
ng()));
\end_layout

\begin_layout Plain Layout

        return false;
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    auto *layer = new ImageDisplayWidget();
\end_layout

\begin_layout Plain Layout

    layer->setImage(newImage);
\end_layout

\begin_layout Plain Layout

    layer->setLabel(StackedImagesWidget::BASE_IMAGE);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    stackedImagesWidget->addLayer(layer);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    scaleFactor = 1.0;
\end_layout

\begin_layout Plain Layout

    scrollArea->setVisible(true);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    return true;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

ImageDisplayWidget *ImageDisplaySubWindow::getTopLayerImage() const {
\end_layout

\begin_layout Plain Layout

    return stackedImagesWidget->getImages().top();
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void ImageDisplaySubWindow::scaleImage(double factor) {
\end_layout

\begin_layout Plain Layout

    scaleFactor *= factor;
\end_layout

\begin_layout Plain Layout

    stackedImagesWidget->scaleImage(scaleFactor);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    adjustScrollBar(scrollArea->horizontalScrollBar(), factor);
\end_layout

\begin_layout Plain Layout

    adjustScrollBar(scrollArea->verticalScrollBar(), factor);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void ImageDisplaySubWindow::adjustScrollBar(QScrollBar *bar, double factor)
 {
\end_layout

\begin_layout Plain Layout

    bar->setValue(int(factor * bar->value()
\end_layout

\begin_layout Plain Layout

                      + ((factor - 1) * bar->pageStep() / 2)));
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void ImageDisplaySubWindow::addNewLayer(const QString& label) {
\end_layout

\begin_layout Plain Layout

    auto layer = new ImageDisplayWidget();
\end_layout

\begin_layout Plain Layout

    auto baseImage = stackedImagesWidget->getImages().top()->getImage();
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    QBrush brush(generateRandomColor());
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    layer->setLabel(label);
\end_layout

\begin_layout Plain Layout

    layer->setImage(baseImage);
\end_layout

\begin_layout Plain Layout

    layer->setPenBrush(brush);
\end_layout

\begin_layout Plain Layout

    stackedImagesWidget->addLayer(layer);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void ImageDisplaySubWindow::removeCurrentLayer() {
\end_layout

\begin_layout Plain Layout

    stackedImagesWidget->removeLayer();
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void ImageDisplaySubWindow::showLayer(const QString &name) {
\end_layout

\begin_layout Plain Layout

    stackedImagesWidget->setTopLayer(name);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void ImageDisplaySubWindow::removeLayerByName(const QString& name) {
\end_layout

\begin_layout Plain Layout

    stackedImagesWidget->removeLayerByName(name);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

QColor ImageDisplaySubWindow::generateRandomColor() {
\end_layout

\begin_layout Plain Layout

    std::random_device dev;
\end_layout

\begin_layout Plain Layout

    std::mt19937 rng(dev());
\end_layout

\begin_layout Plain Layout

    std::uniform_int_distribution<std::mt19937::result_type> randomInt(0,255);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    return QColor(randomInt(rng), randomInt(rng), randomInt(rng));
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void ImageDisplaySubWindow::updatePenWidth(const int &value) {
\end_layout

\begin_layout Plain Layout

    auto image = getTopLayerImage();
\end_layout

\begin_layout Plain Layout

    int currentWidth = image->getPenWidth();
\end_layout

\begin_layout Plain Layout

    image->setPenWidth(currentWidth + value);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void ImageDisplaySubWindow::updatePenBrush(const QColor &value) {
\end_layout

\begin_layout Plain Layout

    auto image = getTopLayerImage();
\end_layout

\begin_layout Plain Layout

    image->setPenBrush(value);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Section

\emph on
Scripts
\emph default
 
\emph on
Python 
\emph default
para Treinamento e Aplicação dos Modelos
\end_layout

\begin_layout Standard

\begin_inset CommandInset label
LatexCommand label
name "list: main.py"

\end_inset


\lang brazilian

\begin_inset listings
lstparams "language=Python,numbers=left,numberstyle={\footnotesize},basicstyle={\footnotesize\ttfamily},breaklines=true,showstringspaces=false,tabsize=4,caption={main.py}"
inline false
status collapsed

\begin_layout Plain Layout

from matplotlib import image
\end_layout

\begin_layout Plain Layout

import trainer
\end_layout

\begin_layout Plain Layout

import tester
\end_layout

\begin_layout Plain Layout

from utils.parser import create_parser
\end_layout

\begin_layout Plain Layout

from utils.image import convert_image_to_rgb_format
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def main(): 
\end_layout

\begin_layout Plain Layout

    args = create_parser()
\end_layout

\begin_layout Plain Layout

    
\end_layout

\begin_layout Plain Layout

    try:
\end_layout

\begin_layout Plain Layout

        if args.train:  
\end_layout

\begin_layout Plain Layout

            epochs = int(args.epochs[0]) if args.epochs else 5
\end_layout

\begin_layout Plain Layout

            trainer.train_from_dataset(args.train[0], epochs)
\end_layout

\begin_layout Plain Layout

            return
\end_layout

\begin_layout Plain Layout

        
\end_layout

\begin_layout Plain Layout

        if args.image:
\end_layout

\begin_layout Plain Layout

            convert_image_to_rgb_format(args.image[0])
\end_layout

\begin_layout Plain Layout

        
\end_layout

\begin_layout Plain Layout

        if args.image and args.model and args.output:
\end_layout

\begin_layout Plain Layout

            tester.apply_model(args.model[0], args.image[0], args.output[0],
 args.save)
\end_layout

\begin_layout Plain Layout

            return
\end_layout

\begin_layout Plain Layout

            
\end_layout

\begin_layout Plain Layout

    except TypeError as e:
\end_layout

\begin_layout Plain Layout

         print(f"{type(e).__name__} at line {e.__traceback__.tb_lineno} of
 {__file__}: {e}")
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

if __name__ == "__main__":
\end_layout

\begin_layout Plain Layout

    main()
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "list: rock_dataset.py"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Python,numbers=left,numberstyle={\footnotesize},basicstyle={\footnotesize\ttfamily},breaklines=true,showstringspaces=false,tabsize=4,caption={rock_dataset.py}"
inline false
status collapsed

\begin_layout Plain Layout

import torch
\end_layout

\begin_layout Plain Layout

from torch.utils.data import Dataset, DataLoader
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

class RockDataset(Dataset):
\end_layout

\begin_layout Plain Layout

    def __init__(self, content_data):
\end_layout

\begin_layout Plain Layout

        self.content_data = content_data
\end_layout

\begin_layout Plain Layout

    
\end_layout

\begin_layout Plain Layout

    def __len__(self):
\end_layout

\begin_layout Plain Layout

        return len(self.content_data)
\end_layout

\begin_layout Plain Layout

    
\end_layout

\begin_layout Plain Layout

    def __getitem__(self, index):
\end_layout

\begin_layout Plain Layout

        data = self.content_data[index]
\end_layout

\begin_layout Plain Layout

        rgb = torch.Tensor(data[0:3])
\end_layout

\begin_layout Plain Layout

        label = data[3]
\end_layout

\begin_layout Plain Layout

        
\end_layout

\begin_layout Plain Layout

        return rgb, label
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "list: rock_model.py"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Python,numbers=left,numberstyle={\footnotesize},basicstyle={\footnotesize\ttfamily},breaklines=true,showstringspaces=false,tabsize=4,caption={rock_model.py}"
inline false
status collapsed

\begin_layout Plain Layout

import torch.nn as nn
\end_layout

\begin_layout Plain Layout

import torch.nn.functional as F
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

class RockNetModel(nn.Module):
\end_layout

\begin_layout Plain Layout

    def __init__(self):
\end_layout

\begin_layout Plain Layout

        super().__init__()
\end_layout

\begin_layout Plain Layout

        self.fc1 = nn.Linear(3, 4)
\end_layout

\begin_layout Plain Layout

        self.fc2 = nn.Linear(4, 4)
\end_layout

\begin_layout Plain Layout

        self.fc3 = nn.Linear(4, 4)
\end_layout

\begin_layout Plain Layout

        self.fc4 = nn.Linear(4, 2)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    def forward(self, x):
\end_layout

\begin_layout Plain Layout

        x = F.relu(self.fc1(x))
\end_layout

\begin_layout Plain Layout

        x = F.relu(self.fc2(x))
\end_layout

\begin_layout Plain Layout

        x = F.relu(self.fc3(x))
\end_layout

\begin_layout Plain Layout

        x = self.fc4(x)
\end_layout

\begin_layout Plain Layout

        return F.log_softmax(x, dim=1)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "list: tester.py"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Python,numbers=left,numberstyle={\footnotesize},basicstyle={\footnotesize\ttfamily},breaklines=true,showstringspaces=false,tabsize=4,caption={tester.py}"
inline false
status collapsed

\begin_layout Plain Layout

import torch
\end_layout

\begin_layout Plain Layout

from os import path
\end_layout

\begin_layout Plain Layout

from utils.image import apply_binarization, calculate_porosity, save_image,
 save_porosity
\end_layout

\begin_layout Plain Layout

from rock_model import RockNetModel
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def apply_model(model_file, image, output=None, save=False):
\end_layout

\begin_layout Plain Layout

    print(f"Running model in {model_file} on {image} image...")
\end_layout

\begin_layout Plain Layout

    
\end_layout

\begin_layout Plain Layout

    model = RockNetModel()
\end_layout

\begin_layout Plain Layout

    model.load_state_dict(torch.load(model_file))
\end_layout

\begin_layout Plain Layout

    model.eval()
\end_layout

\begin_layout Plain Layout

    
\end_layout

\begin_layout Plain Layout

    dirname, file = path.split(image)
\end_layout

\begin_layout Plain Layout

    filename, _ = path.splitext(file)
\end_layout

\begin_layout Plain Layout

    
\end_layout

\begin_layout Plain Layout

    if output:
\end_layout

\begin_layout Plain Layout

        dirname = output
\end_layout

\begin_layout Plain Layout

        
\end_layout

\begin_layout Plain Layout

    
\end_layout

\begin_layout Plain Layout

    arr, time = apply_binarization(image, model)
\end_layout

\begin_layout Plain Layout

    
\end_layout

\begin_layout Plain Layout

    save_porosity(calculate_porosity(arr), filename, f"{dirname}/porosity.txt",
 time)   
\end_layout

\begin_layout Plain Layout

    
\end_layout

\begin_layout Plain Layout

    if save:
\end_layout

\begin_layout Plain Layout

        save_image(arr, f"{dirname}/{filename}")
\end_layout

\begin_layout Plain Layout

        
\end_layout

\begin_layout Plain Layout

    print("Done!")
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "list: trainer.py"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Python,numbers=left,numberstyle={\footnotesize},basicstyle={\footnotesize\ttfamily},breaklines=true,showstringspaces=false,tabsize=4,caption={trainer.py}"
inline false
status collapsed

\begin_layout Plain Layout

from copy import deepcopy
\end_layout

\begin_layout Plain Layout

import torch
\end_layout

\begin_layout Plain Layout

import torch.optim as optim
\end_layout

\begin_layout Plain Layout

from os import path
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

from rock_model import RockNetModel
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

from utils.dataset import create_dataloaders
\end_layout

\begin_layout Plain Layout

from utils.network import run_test, run_training
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def train_from_dataset(data, epochs=5):
\end_layout

\begin_layout Plain Layout

    print(f"Training for dataset {data}")
\end_layout

\begin_layout Plain Layout

    train_dataloader, test_dataloader = create_dataloaders(data)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    net = RockNetModel()
\end_layout

\begin_layout Plain Layout

    optimizer = optim.Adam(net.parameters(), lr=0.0025)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    run_training(epochs, train_dataloader, net, optimizer)
\end_layout

\begin_layout Plain Layout

    acc = run_test(test_dataloader, net)
\end_layout

\begin_layout Plain Layout

    
\end_layout

\begin_layout Plain Layout

    print(f'Accuracy: {acc}')
\end_layout

\begin_layout Plain Layout

    
\end_layout

\begin_layout Plain Layout

    data_file_name, _ = path.splitext(data)
\end_layout

\begin_layout Plain Layout

    model_file_name = f"{data_file_name}-nn-model.pt"
\end_layout

\begin_layout Plain Layout

    torch.save(deepcopy(net.state_dict()), model_file_name)
\end_layout

\begin_layout Plain Layout

    
\end_layout

\begin_layout Plain Layout

    print("Done!")
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "list: dataset.py"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Python,numbers=left,numberstyle={\footnotesize},basicstyle={\footnotesize\ttfamily},breaklines=true,showstringspaces=false,tabsize=4,caption={dataset.py}"
inline false
status collapsed

\begin_layout Plain Layout

import torch
\end_layout

\begin_layout Plain Layout

from torch.utils.data import DataLoader
\end_layout

\begin_layout Plain Layout

from rock_dataset import RockDataset
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def load_data_from_file(file_name, pore_label="Poro"):
\end_layout

\begin_layout Plain Layout

    content = []
\end_layout

\begin_layout Plain Layout

    with open(file_name, "r") as f:
\end_layout

\begin_layout Plain Layout

        for line in f.readlines():
\end_layout

\begin_layout Plain Layout

            mod_line = line.strip("
\backslash
n").split("
\backslash
t")
\end_layout

\begin_layout Plain Layout

            rgb = [int(i) for i in mod_line[0:3]]
\end_layout

\begin_layout Plain Layout

            label = 1 if mod_line[3] == pore_label else 0
\end_layout

\begin_layout Plain Layout

            rgb.append(label)
\end_layout

\begin_layout Plain Layout

            content.append(rgb)
\end_layout

\begin_layout Plain Layout

    return content
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def split_dataset(dataset, ratio=0.8):
\end_layout

\begin_layout Plain Layout

    train_size = int(ratio * len(dataset))
\end_layout

\begin_layout Plain Layout

    test_size = len(dataset) - train_size
\end_layout

\begin_layout Plain Layout

    return torch.utils.data.random_split(dataset, [train_size, test_size])
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def create_dataloaders(data):
\end_layout

\begin_layout Plain Layout

    dataset = RockDataset(load_data_from_file(data))
\end_layout

\begin_layout Plain Layout

    train_dataset, test_dataset = split_dataset(dataset)
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    train_dataloader = DataLoader(train_dataset, batch_size=16, shuffle=True)
\end_layout

\begin_layout Plain Layout

    test_dataloader = DataLoader(test_dataset, batch_size=16, shuffle=False)
\end_layout

\begin_layout Plain Layout

    
\end_layout

\begin_layout Plain Layout

    return train_dataloader, test_dataloader
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "list: image.py"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Python,numbers=left,numberstyle={\footnotesize},basicstyle={\footnotesize\ttfamily},breaklines=true,showstringspaces=false,tabsize=4,caption={image.py}"
inline false
status collapsed

\begin_layout Plain Layout

from os import path
\end_layout

\begin_layout Plain Layout

from posixpath import split, splitext
\end_layout

\begin_layout Plain Layout

import torch
\end_layout

\begin_layout Plain Layout

import numpy as np
\end_layout

\begin_layout Plain Layout

import matplotlib.pyplot as plt
\end_layout

\begin_layout Plain Layout

from PIL import Image
\end_layout

\begin_layout Plain Layout

from utils.time_messure import timing_decorator
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def binarize(arr, img_size, net):
\end_layout

\begin_layout Plain Layout

    width, height = img_size
\end_layout

\begin_layout Plain Layout

    binarr = []
\end_layout

\begin_layout Plain Layout

    for row in arr:
\end_layout

\begin_layout Plain Layout

        for pixel in row:
\end_layout

\begin_layout Plain Layout

            data = torch.Tensor(pixel)
\end_layout

\begin_layout Plain Layout

            output = torch.argmax(net(data.view(-1,3)))
\end_layout

\begin_layout Plain Layout

            binarr.append(output)
\end_layout

\begin_layout Plain Layout

    return np.reshape(binarr, (height, width))
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

@timing_decorator
\end_layout

\begin_layout Plain Layout

def apply_binarization(image, net):
\end_layout

\begin_layout Plain Layout

    try:
\end_layout

\begin_layout Plain Layout

        img = Image.open(image).convert("RGB")    
\end_layout

\begin_layout Plain Layout

        arr = np.asarray(img)
\end_layout

\begin_layout Plain Layout

        
\end_layout

\begin_layout Plain Layout

        return binarize(arr, img.size, net)
\end_layout

\begin_layout Plain Layout

    except IndexError as e:
\end_layout

\begin_layout Plain Layout

        print(f"{type(e).__name__} at line {e.__traceback__.tb_lineno} of {__file__
}: {e}")
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def calculate_porosity(arr):
\end_layout

\begin_layout Plain Layout

    total = arr.shape[0] * arr.shape[1]
\end_layout

\begin_layout Plain Layout

    pores = 0
\end_layout

\begin_layout Plain Layout

    for i in arr:
\end_layout

\begin_layout Plain Layout

        for j in i:
\end_layout

\begin_layout Plain Layout

            pores += int(j)
\end_layout

\begin_layout Plain Layout

    return pores / total
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def save_porosity(porosity, name, file, time):
\end_layout

\begin_layout Plain Layout

    with open(file, "a") as f:
\end_layout

\begin_layout Plain Layout

        f.write(f"{name} 
\backslash
t {porosity} 
\backslash
t {time}
\backslash
n")
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def show_image(arr):
\end_layout

\begin_layout Plain Layout

    plt.imshow(arr, cmap="gray", interpolation="nearest")
\end_layout

\begin_layout Plain Layout

    plt.show()
\end_layout

\begin_layout Plain Layout

    
\end_layout

\begin_layout Plain Layout

def save_image(arr, name):
\end_layout

\begin_layout Plain Layout

    Image.fromarray((arr * 255).astype(np.uint8)).save(f"{name}-bin.png")
\end_layout

\begin_layout Plain Layout

    
\end_layout

\begin_layout Plain Layout

def convert_image_to_rgb_format(image_name):
\end_layout

\begin_layout Plain Layout

    img = Image.open(image_name).convert("RGB")
\end_layout

\begin_layout Plain Layout

    name, _ = path,splitext()
\end_layout

\begin_layout Plain Layout

    img.save(f"{name}-converted.png")
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "list: network.py"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Python,numbers=left,numberstyle={\footnotesize},basicstyle={\footnotesize\ttfamily},breaklines=true,showstringspaces=false,tabsize=4,caption={network.py}"
inline false
status collapsed

\begin_layout Plain Layout

import torch
\end_layout

\begin_layout Plain Layout

import torch.nn.functional as F
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def run_training(num_epochs, train_dataloader, net, optimizer):
\end_layout

\begin_layout Plain Layout

    for epoch in range(num_epochs):
\end_layout

\begin_layout Plain Layout

        for data in train_dataloader: 
\end_layout

\begin_layout Plain Layout

            X, y = data 
\end_layout

\begin_layout Plain Layout

            net.zero_grad() 
\end_layout

\begin_layout Plain Layout

            output = net(X.view(-1, 3)) 
\end_layout

\begin_layout Plain Layout

            loss = F.nll_loss(output, y) 
\end_layout

\begin_layout Plain Layout

            loss.backward() 
\end_layout

\begin_layout Plain Layout

            optimizer.step() 
\end_layout

\begin_layout Plain Layout

        print(f"{epoch + 1} of {num_epochs} epochs - Loss: {loss}")
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def run_test(test_dataloader, net):
\end_layout

\begin_layout Plain Layout

    correct = 0
\end_layout

\begin_layout Plain Layout

    total = 0
\end_layout

\begin_layout Plain Layout

    with torch.no_grad():
\end_layout

\begin_layout Plain Layout

        for data in test_dataloader:
\end_layout

\begin_layout Plain Layout

            X, y = data
\end_layout

\begin_layout Plain Layout

            output = net(X.view(-1,3))
\end_layout

\begin_layout Plain Layout

            for idx, i in enumerate(output):
\end_layout

\begin_layout Plain Layout

                if torch.argmax(i) == y[idx]:
\end_layout

\begin_layout Plain Layout

                    correct += 1
\end_layout

\begin_layout Plain Layout

                total += 1
\end_layout

\begin_layout Plain Layout

    return round(correct/total, 3)
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "list: parser.py"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Python,numbers=left,numberstyle={\footnotesize},basicstyle={\footnotesize\ttfamily},breaklines=true,showstringspaces=false,tabsize=4,caption={network.py}"
inline false
status collapsed

\begin_layout Plain Layout

import argparse
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def create_parser():
\end_layout

\begin_layout Plain Layout

    parser = argparse.ArgumentParser(description = "Rock NN CLI")
\end_layout

\begin_layout Plain Layout

    
\end_layout

\begin_layout Plain Layout

    parser.add_argument("-t", "--train", type = str, nargs = 1,
\end_layout

\begin_layout Plain Layout

                        default = None,help = "Train a new model from dataset")
\end_layout

\begin_layout Plain Layout

    
\end_layout

\begin_layout Plain Layout

    parser.add_argument("-i", "--image", type = str, nargs = 1,
\end_layout

\begin_layout Plain Layout

                        default = None, help = "Image to test")
\end_layout

\begin_layout Plain Layout

    
\end_layout

\begin_layout Plain Layout

    parser.add_argument("-m", "--model", type = str, nargs = 1,
\end_layout

\begin_layout Plain Layout

                        default = None, help = "Model file location")
\end_layout

\begin_layout Plain Layout

    
\end_layout

\begin_layout Plain Layout

    parser.add_argument("-o", "--output", type = str, nargs = 1,
\end_layout

\begin_layout Plain Layout

                        default = None, help = "Select the output folder")
\end_layout

\begin_layout Plain Layout

    
\end_layout

\begin_layout Plain Layout

    parser.add_argument("-e", "--epochs", type = int, nargs = 1,
\end_layout

\begin_layout Plain Layout

                         default = None, help = "Number of epochs in training")
\end_layout

\begin_layout Plain Layout

   
\end_layout

\begin_layout Plain Layout

    parser.add_argument("-s", "--save", action='store_true',
\end_layout

\begin_layout Plain Layout

                         default = False, help = "Save the result of binarizatio
n process")
\end_layout

\begin_layout Plain Layout

    
\end_layout

\begin_layout Plain Layout

    return parser.parse_args()
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "list: time_measure.py"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=Python,numbers=left,numberstyle={\footnotesize},basicstyle={\footnotesize\ttfamily},breaklines=true,showstringspaces=false,tabsize=4,caption={network.py}"
inline false
status open

\begin_layout Plain Layout

import time
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

def timing_decorator(func):
\end_layout

\begin_layout Plain Layout

    def wrapper(*args, **kwargs):
\end_layout

\begin_layout Plain Layout

        start = time.time()
\end_layout

\begin_layout Plain Layout

        original_return_val = func(*args, **kwargs)
\end_layout

\begin_layout Plain Layout

        end = time.time()
\end_layout

\begin_layout Plain Layout

        time_elapsed = end - start
\end_layout

\begin_layout Plain Layout

        print("time elapsed in ", func.__name__, ": ", time_elapsed, sep='')
\end_layout

\begin_layout Plain Layout

        return original_return_val, time_elapsed
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    return wrapper
\end_layout

\end_inset


\end_layout

\end_body
\end_document
